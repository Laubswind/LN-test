
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NodeConfigScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  nodeAlias: 'nodeAlias',
  host: 'host',
  port: 'port',
  network: 'network',
  isDefault: 'isDefault',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChannelHistoryScalarFieldEnum = {
  id: 'id',
  channelPoint: 'channelPoint',
  peerPubkey: 'peerPubkey',
  capacity: 'capacity',
  localBalance: 'localBalance',
  remoteBalance: 'remoteBalance',
  status: 'status',
  isActive: 'isActive',
  openHeight: 'openHeight',
  closeHeight: 'closeHeight',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChannelStatusUpdateScalarFieldEnum = {
  id: 'id',
  channelHistoryId: 'channelHistoryId',
  previousStatus: 'previousStatus',
  newStatus: 'newStatus',
  blockHeight: 'blockHeight',
  confirmations: 'confirmations',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentHistoryScalarFieldEnum = {
  id: 'id',
  paymentHash: 'paymentHash',
  paymentRequest: 'paymentRequest',
  destination: 'destination',
  amount: 'amount',
  fee: 'fee',
  status: 'status',
  preimage: 'preimage',
  failureReason: 'failureReason',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.InvoiceHistoryScalarFieldEnum = {
  id: 'id',
  paymentHash: 'paymentHash',
  paymentRequest: 'paymentRequest',
  amount: 'amount',
  memo: 'memo',
  status: 'status',
  isPaid: 'isPaid',
  amountPaid: 'amountPaid',
  createdAt: 'createdAt',
  paidAt: 'paidAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.BalanceSnapshotScalarFieldEnum = {
  id: 'id',
  totalBalance: 'totalBalance',
  confirmedBalance: 'confirmedBalance',
  unconfirmedBalance: 'unconfirmedBalance',
  lockedBalance: 'lockedBalance',
  reservedBalanceAnchor: 'reservedBalanceAnchor',
  channelBalance: 'channelBalance',
  pendingChannelBalance: 'pendingChannelBalance',
  timestamp: 'timestamp'
};

exports.Prisma.TransactionHistoryScalarFieldEnum = {
  id: 'id',
  txid: 'txid',
  amount: 'amount',
  fee: 'fee',
  type: 'type',
  status: 'status',
  blockHeight: 'blockHeight',
  confirmations: 'confirmations',
  toAddress: 'toAddress',
  fromAddress: 'fromAddress',
  memo: 'memo',
  createdAt: 'createdAt',
  confirmedAt: 'confirmedAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  details: 'details',
  level: 'level',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  isEncrypted: 'isEncrypted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  keyHash: 'keyHash',
  permissions: 'permissions',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  USER: 'USER',
  READONLY: 'READONLY'
};

exports.ChannelStatus = exports.$Enums.ChannelStatus = {
  PENDING_OPEN: 'PENDING_OPEN',
  ACTIVE: 'ACTIVE',
  PENDING_CLOSE: 'PENDING_CLOSE',
  CLOSED: 'CLOSED',
  FORCE_CLOSE: 'FORCE_CLOSE'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  OPEN: 'OPEN',
  SETTLED: 'SETTLED',
  CANCELLED: 'CANCELLED',
  ACCEPTED: 'ACCEPTED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  SEND: 'SEND',
  RECEIVE: 'RECEIVE',
  CHANNEL_OPEN: 'CHANNEL_OPEN',
  CHANNEL_CLOSE: 'CHANNEL_CLOSE'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED'
};

exports.LogLevel = exports.$Enums.LogLevel = {
  DEBUG: 'DEBUG',
  INFO: 'INFO',
  WARN: 'WARN',
  ERROR: 'ERROR',
  CRITICAL: 'CRITICAL'
};

exports.Prisma.ModelName = {
  User: 'User',
  NodeConfig: 'NodeConfig',
  ChannelHistory: 'ChannelHistory',
  ChannelStatusUpdate: 'ChannelStatusUpdate',
  PaymentHistory: 'PaymentHistory',
  InvoiceHistory: 'InvoiceHistory',
  BalanceSnapshot: 'BalanceSnapshot',
  TransactionHistory: 'TransactionHistory',
  ActivityLog: 'ActivityLog',
  SystemConfig: 'SystemConfig',
  ApiKey: 'ApiKey'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
